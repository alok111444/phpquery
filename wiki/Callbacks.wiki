=Table of Conents=
 * [#What_are_callbacks What are callbacks]
 * [#JavaScript_callbacks JavaScript callbacks]
 * [#PHP_callbacks PHP callbacks]
 * [#ParamStructures ParamStructures]
 * [#Supported_Methods Supported Methods]
 * [#Scope_Pseudo_Inheritance Scope Pseudo-Inheritance]
==What are callbacks==
Callbacks are functions _called back_ by other functions in proper moment (eg on [http://code.google.com/p/phpquery/wiki/Ajax Ajax] request error).
==JavaScript callbacks==
In JavaScript this pattern can be very flexible due to [http://en.wikipedia.org/wiki/Closure_(computer_science) Closures] support, which can be inline (no code break) and inherits scope (no need to passing params).
==PHP callbacks==
PHP has only simple [http://pl2.php.net/manual/en/function.call-user-func-array.php support for callbacks] so the case is more complicated. That's why *ParamStructures* has been introduced in phpQuery.
==ParamStructures==
ParamStructures are lists of params. Such list can contain values defined by programmer or special places where function triggering callback will fill it's own values.
====Example 1====
{{{
phpQuery::each(array(1,2,3), 'myCallback', 'param1', new CallbackParam, new CallbackParam, 'param4');
function myCallback($param1, $i, $v, $param4) {
  print "Index: $i; Value: $v";
}
}}}
Example above shows how to easily pass custom params to callback using *ParamStructures*.
==Supported Methods==
 * `phpQuery::each()`
 * `phpQuery::map()`
 * `pq()->each()`
 * `pq()->each()`
==Scope Pseudo-Inheritance==
There is easy way to pseudo-inherit scope in PHP. [http://en.wikipedia.org/wiki/Scope_(programming) Scope] means _variables accessible in specified point of code_. It's achieved using [http://php.net/compact compact()] and [http://php.net/extract extract()] functions.
====Example 2====
Look at this modified [#Example_1 example 1]:
{{{
$a = 'foo';
$b = 'bar';
phpQuery::each(array(1,2,3), 'myCallback', compact('a', 'b'), new CallbackParam, new CallbackParam, 'param4');
function myCallback($scope, $i, $v, $param4) {
  extract($scope);
  print "Var a: $a";
  print "Var b: $b";
  print "Index: $i; Value: $v";
}
}}}
In the future this functionality will be developed.